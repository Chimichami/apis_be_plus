org: jorgemelgarejo
service: api-rockie

provider:
  name: aws
  runtime: python3.12
  region: us-east-1
  role: arn:aws:iam::232690452415:role/LabRole
  stage: ${opt:stage, 'dev'}

package:
  individually: true

functions:
  CreateRockie:
    handler: Lambda_Create_Rockie.lambda_handler
    memorySize: 512
    timeout: 30
    environment:
      VALIDATE_FUNCTION_NAME: ${self:custom.validateTokenFunction}
      STAGE: ${self:provider.stage}
    events:
      - http:
          path: rockie
          method: post
          integration: lambda
          cors: true  # Habilitar CORS
          authorizer:  # Usar la funci贸n Lambda para validar el token
            arn: arn:aws:lambda:${self:provider.region}:232690452415:function:${self:custom.validateTokenFunction}
            resultTtlInSeconds: 300
            identitySource: "method.request.header.Authorization"
          request:
            template:
              application/json: |
                {
                  "method": "$context.httpMethod",
                  "path": "$context.path",
                  "headers": {
                    "Authorization": "$input.params('Authorization')"
                  },
                  "body": $input.body
                }

  GetRockie:
    handler: Lambda_Get_Rockie.lambda_handler
    memorySize: 512
    timeout: 30
    environment:
      VALIDATE_FUNCTION_NAME: ${self:custom.validateTokenFunction}
      STAGE: ${self:provider.stage}
    events:
      - http:
          path: rockie
          method: get
          integration: lambda
          cors: true  # Habilitar CORS
          authorizer:  # Usar la funci贸n Lambda para validar el token
            arn: arn:aws:lambda:${self:provider.region}:232690452415:function:${self:custom.validateTokenFunction}
            resultTtlInSeconds: 300
            identitySource: "method.request.header.Authorization"
          request:
            template:
              application/json: |
                {
                  "method": "$context.httpMethod",
                  "path": "$context.path",
                  "headers": {
                    "Authorization": "$input.params('Authorization')"
                  }
                }

  UpdateRockie:
    handler: Lambda_Update_Rockie.lambda_handler
    memorySize: 512
    timeout: 30
    environment:
      VALIDATE_FUNCTION_NAME: ${self:custom.validateTokenFunction}
      STAGE: ${self:provider.stage}
    events:
      - http:
          path: rockie
          method: put
          integration: lambda
          cors: true  # Habilitar CORS
          authorizer:  # Usar la funci贸n Lambda para validar el token
            arn: arn:aws:lambda:${self:provider.region}:232690452415:function:${self:custom.validateTokenFunction}
            resultTtlInSeconds: 300
            identitySource: "method.request.header.Authorization"
          request:
            template:
              application/json: |
                {
                  "method": "$context.httpMethod",
                  "path": "$context.path",
                  "headers": {
                    "Authorization": "$input.params('Authorization')"
                  },
                  "body": $input.body
                }

  DeleteRockie:
    handler: Lambda_Delete_Rockie.lambda_handler
    memorySize: 512
    timeout: 30
    environment:
      VALIDATE_FUNCTION_NAME: ${self:custom.validateTokenFunction}
      STAGE: ${self:provider.stage}
    events:
      - http:
          path: rockie
          method: delete
          integration: lambda
          cors: true  # Habilitar CORS
          authorizer:  # Usar la funci贸n Lambda para validar el token
            arn: arn:aws:lambda:${self:provider.region}:232690452415:function:${self:custom.validateTokenFunction}
            resultTtlInSeconds: 300
            identitySource: "method.request.header.Authorization"
          request:
            template:
              application/json: |
                {
                  "method": "$context.httpMethod",
                  "path": "$context.path",
                  "headers": {
                    "Authorization": "$input.params('Authorization')"
                  }
                }

custom:
  validateTokenFunction: api-security-${self:provider.stage}-ValidateAccessToken
